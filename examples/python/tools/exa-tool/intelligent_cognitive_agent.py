# # -*- coding: utf-8 -*-
# """Intelligent_Cognitive_Agent.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1UssW8MZyZpMX6oVjhqn4O6euxLLIVgGM

# # ðŸ§  Cognitive Assistant Agent Team (PraisonAI)

# This notebook demonstrates a multi-specialist cognitive assistant using PraisonAI, with each specialist as a tool.

# [![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DhivyaBharathy-web/PraisonAI/blob/main/examples/cookbooks/Intelligent_Cognitive_Agent.ipynb)

# # Install Dependencies
# """

# !pip install praisonaiagents

# """# Set API Key"""

import os

# Set your OpenAI or OpenRouter API key for PraisonAI
os.environ['OPENAI_API_KEY'] = 'Enter your api key'  # <-- Replace with your actual OpenAI or OpenRouter API key

"""# Imports and Specialist Agent Definitions"""

import re
from praisonaiagents import Agent

# Dummy specialist agent classes for demonstration.
# Replace these with your actual specialist agent logic if needed.
class SpecialistAgent:
    def __init__(self, name):
        self.name = name
    def run(self, query):
        return f"{self.name} specialist response to: {query}"

# Instantiate all specialist agents (replace with your real classes if available)
specialists = [
    SpecialistAgent("decision_risk_agent"),
    SpecialistAgent("problem_solving_innovation_agent"),
    SpecialistAgent("Systems___Complexity_Agent"),
    SpecialistAgent("bias_psychology_agent"),
    SpecialistAgent("Strategy___Competition_Agent"),
    SpecialistAgent("Learning___Communication_Agent"),
    SpecialistAgent("Efficiency___Process_Agent"),
    SpecialistAgent("motivation_human_factors_agent"),
]

"""# Tool Wrapping and Agent Setup"""

def make_tool(agent):
    def tool(query: str):
        return agent.run(query)
    # Sanitize the tool name to match PraisonAI's requirements
    safe_name = re.sub(r'[^a-zA-Z0-9_-]', '_', agent.name or "tool")
    tool.__name__ = safe_name
    return tool

tools = [make_tool(agent) for agent in specialists]

agent = Agent(
    instructions="""
        You are a cognitive assistant with access to a set of specialist tools (decision making, problem solving, systems thinking, psychology, strategy, learning, efficiency, motivation).
        Use the most relevant tool(s) to answer the user's query.
    """,
    tools=tools,
)

# """# User Query and Agent Response"""

user_query = input("Ask your question (or type 'quit' to exit): ")
while user_query.lower() != 'quit':
    print("\n--- Thinking ---")
    response = agent.start(user_query)
    print(response)
    print("\n---------------")
    user_query = input("Ask your question (or type 'quit' to exit): ")
print("Cognitive Assistant Agent Team - Finished.")