# -*- coding: utf-8 -*-
"""PraisonAI_QA_Automation_Copilot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11LPzL6LcBa5BwKwT4GE594gKoL75W1vS

# 🧑‍💻 QA-T Agent: Quality Automation Testing Agent (API Demo)

## Description
This notebook demonstrates how to interact with the QA-T Agent backend API for generating test plans and test cases using AI. You can send requirements or files to your running backend and receive generated test artifacts.

[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DhivyaBharathy-web/PraisonAI/blob/main/examples/cookbooks/PraisonAI_QA_Automation_Copilot.ipynb)

# Dependencies
"""

!pip install praisonaiagents duckduckgo-search

"""# Set API Key"""

import os
os.environ["OPENAI_API_KEY"] = "Enter your api key here"  # Replace with your actual key

"""# Tools Used"""

from praisonaiagents import Agent
from typing import Dict

# --- PROMPT LOGIC FROM YOUR BACKEND ---

def gherkin_prompt(requirement, feature_name="Test Feature"):
    return f"""
Generate a Gherkin feature file for the following requirement:
{requirement}

Include:
- Feature name: {feature_name}
- Multiple scenarios
- Given-When-Then steps
- Background if needed

Format as:
Feature: {feature_name}
[Description]

Scenario: [Scenario Name]
Given [precondition]
When [action]
Then [expected result]
"""

def selenium_prompt(requirement, test_name="test_case", language="python"):
    return f"""
Generate a Selenium test script in {language} for:
{requirement}

Include:
- Test name: {test_name}
- WebDriver setup
- Page object pattern
- Assertions
- Error handling
"""

def manual_test_prompt(user_story):
    return f"""
Generate manual test cases for this user story:
{user_story}

Include:
- Test case ID
- Test steps
- Expected results
- Test data
- Priority levels

Format as:
Test Case ID: TC001
Test Steps:
1. [step]
2. [step]
Expected Result: [result]
Priority: [High/Medium/Low]
"""

def chat_prompt(question):
    return f"""
Answer this testing question: {question}

Provide:
- Clear explanation
- Best practices
- Examples if relevant
"""

"""# YAML Prompt"""

yaml_prompt = """
name: QA Test Generation Agent
description: AI-powered test automation system

tools:
  - name: generate_gherkin
    description: Generate Gherkin feature files from user stories
    parameters:
      requirement: str
      feature_name: str

  - name: generate_selenium
    description: Generate Selenium test scripts in Python
    parameters:
      requirement: str
      test_name: str
      language: str

  - name: generate_manual_tests
    description: Generate manual test cases
    parameters:
      user_story: str

  - name: chat_assistance
    description: Provide testing guidance and explanations
    parameters:
      question: str
"""
print(yaml_prompt)

"""# Main (Agent Routing Logic from Your Backend)"""

class QATestAgent:
    def __init__(self, llm_agent):
        self.llm_agent = llm_agent

    def route_request(self, request: Dict) -> str:
        agent_type = request.get("agentType", "chat").lower()
        requirement = request.get("requirement", "")
        feature_name = request.get("featureName", "Test Feature")
        test_name = request.get("testName", "test_case")
        language = request.get("language", "python")
        user_story = request.get("user_story", requirement)
        question = request.get("question", requirement)

        if agent_type in ["gherkin", "test_generator"]:
            prompt = gherkin_prompt(requirement, feature_name)
        elif agent_type in ["selenium", "selenium_generator"]:
            prompt = selenium_prompt(requirement, test_name, language)
        elif agent_type in ["manual", "manual_testcases"]:
            prompt = manual_test_prompt(user_story)
        else:
            prompt = chat_prompt(question)

        # Use PraisonAI LLM to generate the response
        return self.llm_agent.start(prompt)

# Create the LLM agent (PraisonAI)
llm_agent = Agent(
    instructions="You are a QA Test Generation Agent. Use the prompt to generate the required output.",
    tools=[]
)

qa_agent = QATestAgent(llm_agent)

"""# Usage Examples"""

# Example 1: Generate Gherkin
gherkin_result = qa_agent.route_request({
    "agentType": "gherkin",
    "requirement": "User login functionality with email and password",
    "featureName": "User Authentication"
})
print("=== Gherkin Generation ===\n", gherkin_result)

# Example 2: Generate Selenium
selenium_result = qa_agent.route_request({
    "agentType": "selenium",
    "requirement": "Test login page with valid credentials",
    "testName": "test_login_valid",
    "language": "python"
})
print("\n=== Selenium Generation ===\n", selenium_result)

# Example 3: Generate Manual Tests
manual_result = qa_agent.route_request({
    "agentType": "manual",
    "requirement": "As a user, I want to login to the application so that I can access my account"
})
print("\n=== Manual Test Generation ===\n", manual_result)

# Example 4: Chat Assistance
chat_result = qa_agent.route_request({
    "agentType": "chat",
    "requirement": "What is the difference between unit testing and integration testing?"
})
print("\n=== Chat Assistance ===\n", chat_result)