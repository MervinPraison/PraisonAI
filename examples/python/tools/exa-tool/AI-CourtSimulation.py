# # -*- coding: utf-8 -*-
# """AI-CourtSimulation.ipynb

# Automatically generated by Colab.

# Original file is located at
#     https://colab.research.google.com/drive/1Pc6GCFJN9Fyq_oP4MCtPmeTSt_AZmRMT

# # ‚öñÔ∏è AI-Court Simulation

# A simplified court case simulation with essential AI agents.

# [![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/DhivyaBharathy-web/PraisonAI/blob/main/examples/cookbooks/LegaliaAI_MiniCourt.ipynb)

# ## Install Dependencies
# """

# !pip install praisonaiagents openai python-dotenv

# """## Import Libraries & Setup"""

import os
from dotenv import load_dotenv
from IPython.display import display, HTML
import time

load_dotenv()

# Setup API key
api_key = os.getenv('OPENAI_API_KEY')
if not api_key:
    print("üîë Enter your OpenAI API key:")
    api_key = input("API Key: ").strip()
    os.environ['OPENAI_API_KEY'] = "Enter your api key"

print("‚úÖ Setup complete!")

# """## Create Mini Agents"""

from praisonaiagents import Agent

# Judge Agent
judge = Agent(
    name="Judge",
    role="Preside over court proceedings",
    llm="gpt-4o-mini",
    instructions=[
        "You are an impartial judge",
        "Make fair decisions based on evidence",
        "Keep responses under 100 words"
    ],
    markdown=True
)

# Prosecutor Agent
prosecutor = Agent(
    name="Prosecutor",
    role="Present case against defendant",
    llm="gpt-4o-mini",
    instructions=[
        "You are a prosecutor seeking conviction",
        "Present evidence methodically",
        "Keep responses under 80 words"
    ],
    markdown=True
)

# Defense Agent
defense = Agent(
    name="Defense",
    role="Defend the accused",
    llm="gpt-4o-mini",
    instructions=[
        "You are a defense attorney",
        "Create reasonable doubt",
        "Keep responses under 80 words"
    ],
    markdown=True
)

# Witness Agent
witness = Agent(
    name="Witness",
    role="Provide testimony",
    llm="gpt-4o-mini",
    instructions=[
        "You are a witness testifying",
        "Provide factual testimony",
        "Keep responses under 60 words"
    ],
    markdown=True
)

print("‚úÖ Mini agents created!")

"""# Case Details Input"""

# Simple case details
case_title = input("Case Title (e.g., 'State vs. Smith'): ") or "State vs. Smith"
case_description = input("Case Description: ") or "Theft case involving stolen laptop"
evidence = input("Key Evidence: ") or "Security camera footage and witness testimony"

print(f"\nüìã Case: {case_title}")
print(f"üìù Description: {case_description}")
print(f"üîç Evidence: {evidence}")

"""# Helper Functions (Fixed with .start())## Cell 4: Case Details Input"""

# Display function
def show_message(name, role, message, color="#4CAF50"):
    html = f"""
    <div style="
        background: {color};
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 10px 0;
    ">
        <strong>‚öñÔ∏è {name}</strong> ‚Ä¢ <em>{role}</em><br>
        <div style="margin-top: 10px;">{message}</div>
    </div>
    """
    display(HTML(html))

# Run agent using .start()
def run_agent(agent, prompt, name, role, color="#4CAF50"):
    try:
        response = agent.start(prompt)
        show_message(name, role, response, color)
        return response
    except Exception as e:
        show_message("System", "Error", str(e), "#f44336")
        return ""

"""## Mini Court Simulation"""

# Mini court simulation
print("üöÄ Starting Mini Court Simulation...")

# Day 1: Opening
display(HTML(f"<h2>üìÖ Day 1: Opening Statements</h2>"))

# Judge opens court
judge_prompt = f"""
You are Judge presiding over "{case_title}".
Open the court proceedings professionally.
Case: {case_description}
Keep it brief and formal.
"""
judge_response = run_agent(judge, judge_prompt, "Judge", "Presiding Judge", "#8B4513")

# Prosecutor opening
prosecutor_prompt = f"""
You are the Prosecutor for "{case_title}".
Give your opening statement.
Evidence: {evidence}
Be confident and factual.
"""
prosecutor_response = run_agent(prosecutor, prosecutor_prompt, "Prosecutor", "State Attorney", "#d32f2f")

# Defense opening
defense_prompt = f"""
You are the Defense Attorney for "{case_title}".
Give your opening statement.
Challenge the prosecution's case.
Emphasize presumption of innocence.
"""
defense_response = run_agent(defense, defense_prompt, "Defense", "Defense Attorney", "#1976d2")

time.sleep(1)

# Day 2: Testimony
display(HTML(f"<h2>üìÖ Day 2: Witness Testimony</h2>"))

# Witness testimony
witness_prompt = f"""
You are a witness in "{case_title}".
Provide your testimony about what you saw.
Evidence: {evidence}
Be factual and clear.
"""
witness_response = run_agent(witness, witness_prompt, "Witness", "Court Witness", "#ff9800")

time.sleep(1)

# Day 3: Verdict
display(HTML(f"<h2>üìÖ Day 3: Final Verdict</h2>"))

# Judge's verdict
verdict_prompt = f"""
You are Judge presiding over "{case_title}".
Deliver your final verdict.
Consider all evidence: {evidence}
Be fair and explain your reasoning.
"""
verdict_response = run_agent(judge, verdict_prompt, "Judge", "Final Verdict", "#8B4513")

print("\n‚úÖ Mini court simulation completed!")

# """# Summary"""

print("üéØ Mini Legalia AI Complete!")
print("\nThis simplified version demonstrates:")
print("- 4 Essential Agents: Judge, Prosecutor, Defense, Witness")
print("- 3-Day Trial: Opening, Testimony, Verdict")
print("- Real-time Interaction: Each agent responds based on case context")
print("- Easy Setup: Minimal dependencies and configuration")
print("\nPerfect for quick demonstrations and learning! ‚öñÔ∏è")
