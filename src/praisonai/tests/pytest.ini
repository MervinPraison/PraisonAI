[pytest]
# Test discovery patterns
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test directories
testpaths = unit integration

# Markers for test categorization
markers =
    unit: Unit tests that test individual components in isolation
    integration: Integration tests that test component interactions
    real: Tests that use real external services (skip in CI)
    slow: Tests that take longer than usual to run
    asyncio: Asynchronous tests
    timeout: Tests with custom timeout values
    mock: Tests that use extensive mocking
    e2e: End-to-end tests

# Asyncio configuration
asyncio_mode = auto

# Output and reporting
addopts = 
    -v
    --strict-markers
    --tb=short
    --disable-warnings
    -p no:warnings
    --cov=praisonai
    --cov-report=term-missing
    --cov-report=html
    --cov-fail-under=70

# Timeout for all tests (can be overridden per test)
timeout = 60

# Ignore certain warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ResourceWarning
    ignore:.*unclosed.*:ResourceWarning

# Pytest plugins
plugins = 
    pytest-asyncio
    pytest-timeout
    pytest-mock
    pytest-cov

# Environment variables for tests
env =
    PRAISON_TEST_MODE = true
    PRAISON_LOG_LEVEL = ERROR

# Logging
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage settings
[coverage:run]
source = praisonai
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING: