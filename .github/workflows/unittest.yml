name: Quick Validation Tests

on: [push, pull_request]

jobs:
  quick-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH


    - name: Install dependencies
      run: |
        cd src/praisonai
        uv pip install --system ."[ui,gradio,api,agentops,google,openai,anthropic,cohere,chat,code,realtime,call,crewai,autogen]"
        uv pip install --system duckduckgo_search
        uv pip install --system pytest pytest-asyncio pytest-cov
        # Install knowledge dependencies from praisonai-agents
        uv pip install --system "praisonaiagents[knowledge]"

    - name: Set environment variables
      run: |
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY || 'sk-test-key-for-github-actions-testing-only-not-real' }}" >> $GITHUB_ENV
        echo "OPENAI_API_BASE=${{ secrets.OPENAI_API_BASE || 'https://api.openai.com/v1' }}" >> $GITHUB_ENV
        echo "OPENAI_MODEL_NAME=${{ secrets.OPENAI_MODEL_NAME || 'gpt-4o-mini' }}" >> $GITHUB_ENV
        echo "LOGLEVEL=DEBUG" >> $GITHUB_ENV
        echo "PYTHONPATH=${{ github.workspace }}/src/praisonai-agents:$PYTHONPATH" >> $GITHUB_ENV

    - name: Backup Root Config Files
      run: |
        echo "üîÑ Backing up root configuration files to prevent default file resolution interference..."
        echo "‚ÑπÔ∏è  PraisonAI automatically uses 'agents.yaml' in working directory when no file specified"
        echo "‚ÑπÔ∏è  This can interfere with test files that specify their own YAML files"
        if [ -f "agents.yaml" ]; then
          mv agents.yaml agents.yaml.backup
          echo "‚úÖ Moved root agents.yaml to agents.yaml.backup"
          echo "   - This prevents default file fallback during tests"
        fi
        if [ -f "tools.py" ]; then
          mv tools.py tools.py.backup  
          echo "‚úÖ Moved tools.py to tools.py.backup"
        fi

    - name: Debug API Key Status
      run: |
        echo "üîç Checking API key availability..."
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "‚úÖ GitHub secret OPENAI_API_KEY is available"
          echo "üîë API key starts with: $(echo "$OPENAI_API_KEY" | cut -c1-7)..."
        else
          echo "‚ö†Ô∏è GitHub secret OPENAI_API_KEY is NOT set - using fallback"
          echo "üîë Using fallback key: sk-test-key..."
        fi
        echo "üåê API Base: $OPENAI_API_BASE"
        echo "ü§ñ Model: $OPENAI_MODEL_NAME"
        echo "üêõ Log Level: $LOGLEVEL"
        echo "üìä Environment Check:"
        echo "  - OPENAI_API_KEY length: ${#OPENAI_API_KEY}"
        echo "  - OPENAI_API_BASE: $OPENAI_API_BASE"
        echo "  - OPENAI_MODEL_NAME: $OPENAI_MODEL_NAME"
        echo "  - LOGLEVEL: $LOGLEVEL"

    - name: Debug Python Environment Variables
      run: |
        python -c "
        import os
        print('üêç Python Environment Variable Check:')
        api_key = os.environ.get('OPENAI_API_KEY', 'NOT_SET')
        if api_key != 'NOT_SET':
            print(f'  ‚úÖ OPENAI_API_KEY: {api_key[:7]}... (length: {len(api_key)})')
        else:
            print('  ‚ùå OPENAI_API_KEY: NOT_SET')
        print(f'  üåê OPENAI_API_BASE: {os.environ.get(\"OPENAI_API_BASE\", \"NOT_SET\")}')
        print(f'  ü§ñ OPENAI_MODEL_NAME: {os.environ.get(\"OPENAI_MODEL_NAME\", \"NOT_SET\")}')
        print(f'  üìã All OPENAI env vars:')
        for key, value in os.environ.items():
            if key.startswith('OPENAI'):
                print(f'    {key}: {value[:10] if len(value) > 10 else value}...')
        "

    - name: Find Researcher Role Source
      run: |
        echo "üîç Hunting for the mysterious 'Researcher' role..."
        cd src/praisonai
        python -c "
        import os
        import yaml
        import glob
        
        print('üìã Searching for Researcher role in all YAML files:')
        yaml_files = glob.glob('src/praisonai/tests/*.yaml')
        
        for yaml_file in yaml_files:
            try:
                with open(yaml_file, 'r') as f:
                    config = yaml.safe_load(f)
                
                # Check if any role contains 'researcher'
                roles = config.get('roles', {})
                for role_key, role_data in roles.items():
                    role_name = role_data.get('role', '')
                    if 'researcher' in role_key.lower() or 'researcher' in role_name.lower():
                        print(f'  üéØ FOUND in {yaml_file}:')
                        print(f'    Framework: {config.get(\"framework\", \"NOT_SET\")}')
                        print(f'    Role key: {role_key}')
                        print(f'    Role name: {role_name}')
                        print(f'    All roles: {list(roles.keys())}')
                        print()
            except Exception as e:
                print(f'  ‚ùå Error reading {yaml_file}: {e}')
        
        print('üîç Checking for default configurations...')
        # Check if there are any default configs or hardcoded roles
        try:
            import praisonai
            print(f'  PraisonAI package location: {praisonai.__file__}')
            
            # Check if there are any example YAML files in the package
            package_dir = os.path.dirname(praisonai.__file__)
            for root, dirs, files in os.walk(package_dir):
                for file in files:
                    if file.endswith(('.yaml', '.yml')):
                        file_path = os.path.join(root, file)
                        print(f'  üìÅ Found YAML in package: {file_path}')
        except Exception as e:
            print(f'  ‚ùå Error checking package: {e}')
        "
      continue-on-error: true

    - name: Trace AutoGen Execution Path
      run: |
        echo "üîç Tracing AutoGen execution to find where it diverges..."
        cd src/praisonai
        python -c "
        import os
        import sys
        sys.path.insert(0, '.')
        
        try:
            from praisonai import PraisonAI
            from praisonai.agents_generator import AgentsGenerator
            
            # Test the exact execution path
            print('üéØ Testing AutoGen execution path:')
            
            praisonai = PraisonAI(agent_file='tests/autogen-agents.yaml')
            print(f'  1. PraisonAI framework: \"{praisonai.framework}\"')
            
            agents_gen = AgentsGenerator(
                agent_file='tests/autogen-agents.yaml',
                framework=praisonai.framework,
                config_list=praisonai.config_list
            )
            print(f'  2. AgentsGenerator framework: \"{agents_gen.framework}\"')
            
            # Load the YAML to check what it contains
            import yaml
            with open('src/praisonai/tests/autogen-agents.yaml', 'r') as f:
                config = yaml.safe_load(f)
            
            framework = agents_gen.framework or config.get('framework')
            print(f'  3. Final framework decision: \"{framework}\"')
            print(f'  4. Available frameworks:')
            
            # Check framework availability
            try:
                import autogen
                print(f'    ‚úÖ AutoGen available')
            except ImportError:
                print(f'    ‚ùå AutoGen NOT available')
                
            try:
                from praisonaiagents import Agent
                print(f'    ‚úÖ PraisonAI agents available')
            except ImportError:
                print(f'    ‚ùå PraisonAI agents NOT available')
                
            try:
                from crewai import Agent
                print(f'    ‚úÖ CrewAI available')
            except ImportError:
                print(f'    ‚ùå CrewAI NOT available')
            
            print(f'  5. Roles in YAML: {list(config.get(\"roles\", {}).keys())}')
            
            # Now test the actual framework execution
            if framework == 'autogen':
                print(f'  6. ‚úÖ Should execute _run_autogen')
            elif framework == 'praisonai':
                print(f'  6. ‚ùå Would execute _run_praisonai (WRONG!)')
            else:
                print(f'  6. ‚ùå Would execute _run_crewai (DEFAULT FALLBACK)')
                
        except Exception as e:
            print(f'‚ùå Error tracing execution: {e}')
            import traceback
            traceback.print_exc()
        "
      continue-on-error: true

    - name: Debug YAML Loading and Roles
      run: |
        echo "üîç Tracing YAML file loading and role creation..."
        cd src/praisonai
        python -c "
        import os
        import sys
        import yaml
        sys.path.insert(0, '.')
        
        print('üìÅ Available YAML files in src/praisonai/tests/:')
        import glob
        yaml_files = glob.glob('tests/*.yaml')
        for f in yaml_files:
            print(f'  {f}')
        
        print()
        print('üìã Content of autogen-agents.yaml:')
        with open('tests/autogen-agents.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print(f'  Framework: {config.get(\"framework\")}')
        print(f'  Topic: {config.get(\"topic\")}')
        print(f'  Roles: {list(config.get(\"roles\", {}).keys())}')
        for role_key, role_data in config.get('roles', {}).items():
            print(f'    {role_key} -> {role_data.get(\"role\", \"NO_ROLE\")}')
        
        print()
        print('üîç Checking if execution uses a different YAML:')
        
        # Check other YAML files for 'Researcher' role
        for yaml_file in yaml_files:
            try:
                with open(yaml_file, 'r') as f:
                    test_config = yaml.safe_load(f)
                roles = test_config.get('roles', {})
                for role_key, role_data in roles.items():
                    if 'researcher' in role_key.lower() or 'researcher' in role_data.get('role', '').lower():
                        print(f'  üéØ FOUND Researcher in {yaml_file}!')
                        print(f'    Framework: {test_config.get(\"framework\")}')
                        print(f'    Role key: {role_key} -> {role_data.get(\"role\")}')
            except:
                pass
        "
      continue-on-error: true

    - name: Debug Framework Detection
      run: |
        echo "üîç Testing framework detection and config flow..."
        python -c "
        import os
        import sys
        import yaml
        sys.path.insert(0, '.')
        
        print('üîß Testing framework detection:')
        
        # Load the YAML file
        with open('tests/autogen-agents.yaml', 'r') as f:
            config = yaml.safe_load(f)
            
        print(f'  üìã YAML framework: {config.get(\"framework\", \"NOT_SET\")}')
        print(f'  üìã YAML topic: {config.get(\"topic\", \"NOT_SET\")}')
        
        try:
            from praisonai import PraisonAI
            from praisonai.agents_generator import AgentsGenerator
            
            # Test PraisonAI initialization
            praisonai = PraisonAI(agent_file='tests/autogen-agents.yaml')
            print(f'  üéØ PraisonAI framework: {praisonai.framework}')
            
            # Test AgentsGenerator initialization
            agents_gen = AgentsGenerator(
                agent_file='tests/autogen-agents.yaml',
                framework=praisonai.framework,
                config_list=praisonai.config_list
            )
            print(f'  ‚öôÔ∏è AgentsGenerator framework: {agents_gen.framework}')
            print(f'  ‚öôÔ∏è Final framework decision: {agents_gen.framework or config.get(\"framework\")}')
            
            # Check config_list
            print(f'  üîë Config list model: {praisonai.config_list[0].get(\"model\")}')
            print(f'  üîë Config list API key: {praisonai.config_list[0].get(\"api_key\", \"NOT_SET\")[:10]}...')
            
        except Exception as e:
            print(f'‚ùå Error in framework detection: {e}')
        "
      continue-on-error: true

    - name: Debug PraisonAIModel API Key Flow
      run: |
        echo "üîç Testing PraisonAIModel API key handling..."
        cd src/praisonai
        python -c "
        import os
        import sys
        sys.path.insert(0, '.')
        
        print('üîë Environment API Key Check:')
        env_key = os.environ.get('OPENAI_API_KEY', 'NOT_FOUND')
        print(f'  OPENAI_API_KEY: {env_key[:10] if env_key != \"NOT_FOUND\" else \"NOT_FOUND\"}...')
        
        try:
            from praisonai.inc.models import PraisonAIModel
            
            # Test PraisonAIModel with openai/gpt-4o-mini (from YAML)
            model = PraisonAIModel(model='openai/gpt-4o-mini')
            
            print('ü§ñ PraisonAIModel Configuration:')
            print(f'  model: {model.model}')
            print(f'  model_name: {model.model_name}')
            print(f'  api_key_var: {model.api_key_var}')
            print(f'  api_key: {model.api_key[:10] if model.api_key != \"nokey\" else \"DEFAULT_NOKEY\"}...')
            print(f'  base_url: {model.base_url}')
            
            if model.api_key == 'nokey':
                print('‚ùå FOUND THE ISSUE: PraisonAIModel is using default \"nokey\" instead of environment variable!')
            else:
                print('‚úÖ PraisonAIModel has valid API key from environment')
                
        except Exception as e:
            print(f'‚ùå Error testing PraisonAIModel: {e}')
        "
      continue-on-error: true

    - name: Validate API Key
      run: |
        echo "üîë Testing API key validity with minimal OpenAI call..."
        python -c "
        import os
        try:
            from openai import OpenAI
            client = OpenAI(api_key=os.environ.get('OPENAI_API_KEY'))
            # Make a minimal API call to test key validity
            response = client.models.list()
            print('‚úÖ API Key is VALID - OpenAI responded successfully')
            print(f'üìä Available models: {len(list(response.data))} models found')
        except Exception as e:
            print(f'‚ùå API Key is INVALID - Error: {e}')
            print('üîç This explains why all API-dependent tests are failing')
            print('üí° The GitHub secret OPENAI_API_KEY needs to be updated with a valid key')
        "
      continue-on-error: true

    - name: Test Direct PraisonAI Execution
      run: |
        echo "üß™ Testing direct PraisonAI execution (what works locally)..."
        python -m praisonai src/praisonai/tests/autogen-agents.yaml
      continue-on-error: true

    - name: Comprehensive Execution Debug
      run: |
        echo "üîç Comprehensive debugging of PraisonAI execution path..."
        cd src/praisonai
        python -c "
        import os
        import sys
        import yaml
        sys.path.insert(0, '.')
        
        print('=' * 60)
        print('üîç COMPREHENSIVE EXECUTION DEBUG')
        print('=' * 60)
        
        # Check current working directory
        print(f'üìÅ Current working directory: {os.getcwd()}')
        
        # List files in current directory
        print('üìã Files in current directory:')
        for f in os.listdir('.'):
            print(f'  {f}')
        
        print()
        print('üìã Files in src/praisonai/tests/ directory:')
        for f in os.listdir('tests'):
            if f.endswith('.yaml'):
                print(f'  src/praisonai/tests/{f}')
        
        # Check if root agents.yaml exists
        print()
        if os.path.exists('agents.yaml'):
            print('‚ùå ROOT agents.yaml EXISTS (this is the problem!)')
            with open('agents.yaml', 'r') as f:
                root_config = yaml.safe_load(f)
            print(f'  Root framework: {root_config.get(\"framework\")}')
            print(f'  Root roles: {list(root_config.get(\"roles\", {}).keys())}')
        else:
            print('‚úÖ ROOT agents.yaml does NOT exist (good!)')
            
        # Test the actual execution path
        print()
        print('üéØ Testing EXACT execution path:')
        
        try:
            from praisonai import PraisonAI
            from praisonai.agents_generator import AgentsGenerator
            
            # Test with full path
            test_file = 'src/praisonai/tests/autogen-agents.yaml'
            print(f'  Using test file: {test_file}')
            print(f'  File exists: {os.path.exists(test_file)}')
            
            # Load the test file directly
            with open(test_file, 'r') as f:
                test_config = yaml.safe_load(f)
            print(f'  Test file framework: {test_config.get(\"framework\")}')
            print(f'  Test file roles: {list(test_config.get(\"roles\", {}).keys())}')
            
            # Create PraisonAI instance
            praisonai = PraisonAI(agent_file=test_file)
            print(f'  PraisonAI.agent_file: {praisonai.agent_file}')
            print(f'  PraisonAI.framework: {praisonai.framework}')
            
            # Create AgentsGenerator
            agents_gen = AgentsGenerator(
                agent_file=test_file,
                framework=praisonai.framework,
                config_list=praisonai.config_list
            )
            print(f'  AgentsGenerator.agent_file: {agents_gen.agent_file}')
            print(f'  AgentsGenerator.framework: {agents_gen.framework}')
            
            # Test what would happen in generate_crew_and_kickoff
            print()
            print('üîß Testing generate_crew_and_kickoff logic:')
            
            # Simulate the loading logic
            if agents_gen.agent_yaml:
                loaded_config = yaml.safe_load(agents_gen.agent_yaml)
                print('  Would load from agent_yaml')
            else:
                if agents_gen.agent_file == '/app/api:app' or agents_gen.agent_file == 'api:app':
                    agents_gen.agent_file = 'agents.yaml'
                    print(f'  Would change agent_file to: {agents_gen.agent_file}')
                try:
                    with open(agents_gen.agent_file, 'r') as f:
                        loaded_config = yaml.safe_load(f)
                    print(f'  Successfully loaded: {agents_gen.agent_file}')
                except FileNotFoundError:
                    print(f'  FileNotFoundError: {agents_gen.agent_file}')
                    loaded_config = None
            
            if loaded_config:
                final_framework = agents_gen.framework or loaded_config.get('framework')
                print(f'  Final framework decision: {final_framework}')
                print(f'  Loaded roles: {list(loaded_config.get(\"roles\", {}).keys())}')
                
                if 'researcher' in loaded_config.get('roles', {}):
                    print('  ‚ùå FOUND Researcher role in loaded config!')
                else:
                    print('  ‚úÖ No Researcher role in loaded config')
                    
        except Exception as e:
            print(f'‚ùå Error during execution debug: {e}')
            import traceback
            traceback.print_exc()
        "
      continue-on-error: true

    - name: Run Fast Tests
      run: |
        # Run the fastest, most essential tests with coverage
        cd src/praisonai && python -m pytest tests/unit/test_core_agents.py -v --tb=short --disable-warnings --cov=praisonai --cov-report=xml --cov-branch

    - name: Run Real API Tests
      run: |
        echo "üîë Running real API tests with actual OpenAI API key..."
        cd src/praisonai && python -m pytest tests/test_agents_playbook.py -v --tb=short --disable-warnings -m real
      continue-on-error: true

    - name: Run E2E Real Tests
      run: |
        echo "üß™ Running E2E real tests..."
        cd src/praisonai && python -m pytest tests/e2e/ -v --tb=short --disable-warnings -m real
      continue-on-error: true

    - name: Run Legacy Example Tests
      run: |
        cd src/praisonai && python -m pytest tests/test.py -v --tb=short --disable-warnings
      continue-on-error: true

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: src/praisonai/coverage.xml
        flags: quick-validation
        name: quick-validation-coverage
        fail_ci_if_error: false
        verbose: true

    - name: Restore Root Config Files
      run: |
        echo "üîÑ Restoring root configuration files..."
        if [ -f "agents.yaml.backup" ]; then
          mv agents.yaml.backup agents.yaml
          echo "‚úÖ Restored agents.yaml"
        fi
        if [ -f "tools.py.backup" ]; then
          mv tools.py.backup tools.py
          echo "‚úÖ Restored tools.py"
        fi
      if: always()  # Always run this step, even if previous steps failed
